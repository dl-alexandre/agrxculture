---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  srcset?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  sizes,
  srcset,
} = Astro.props;

// Generate WebP and fallback versions
const webpSrc = src.replace(/\.[^.]+$/, '.webp');
const baseName = src.split('/').pop()?.split('.')[0] || '';
const extension = src.split('.').pop() || 'jpg';

// Generate responsive srcset if not provided
const responsiveSrcset =
  srcset ||
  [
    `${src.replace(`.${extension}`, '')}-400w.${extension} 400w`,
    `${src.replace(`.${extension}`, '')}-800w.${extension} 800w`,
    `${src.replace(`.${extension}`, '')}-1200w.${extension} 1200w`,
    `${src.replace(`.${extension}`, '')}-1600w.${extension} 1600w`,
  ].join(', ');

const responsiveWebpSrcset = [
  `${webpSrc.replace(`.${extension}`, '')}-400w.webp 400w`,
  `${webpSrc.replace(`.${extension}`, '')}-800w.webp 800w`,
  `${webpSrc.replace(`.${extension}`, '')}-1200w.webp 1200w`,
  `${webpSrc.replace(`.${extension}`, '')}-1600w.webp 1600w`,
].join(', ');

const defaultSizes =
  sizes || '(max-width: 480px) 100vw, (max-width: 768px) 80vw, 60vw';
---

<picture class={`lazy-image ${className}`}>
  <!-- WebP format for modern browsers -->
  <source
    type="image/webp"
    srcset={responsiveWebpSrcset}
    sizes={defaultSizes}
  />

  <!-- Fallback format -->
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    srcset={responsiveSrcset}
    sizes={defaultSizes}
    class="lazy-image__img"
    decoding="async"
  />
</picture>

<style>
  .lazy-image {
    display: block;
    position: relative;
    overflow: hidden;
  }

  .lazy-image__img {
    width: 100%;
    height: auto;
    display: block;
    transition: opacity 0.3s ease-in-out;
  }

  .lazy-image__img[loading='lazy'] {
    opacity: 0;
  }

  .lazy-image__img.loaded {
    opacity: 1;
  }

  /* Loading placeholder */
  .lazy-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  .lazy-image__img.loaded + .lazy-image::before {
    display: none;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>

<script>
  // Lazy loading implementation
  function initLazyLoading() {
    const lazyImages = document.querySelectorAll(
      '.lazy-image__img[loading="lazy"]'
    );

    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.classList.add('loaded');

            // Preload the image
            if (img.dataset.src) {
              img.src = img.dataset.src;
            }

            observer.unobserve(img);
          }
        });
      });

      lazyImages.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for older browsers
      lazyImages.forEach(img => {
        img.classList.add('loaded');
        if (img.dataset.src) {
          img.src = img.dataset.src;
        }
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLazyLoading);
  } else {
    initLazyLoading();
  }
</script>
