---
// Resource Preloader Component for Page Speed Optimization
// Implements resource hints, preloading, and prefetching strategies

interface Props {
  pageType?: 'home' | 'about' | 'services' | 'showcase' | 'contact';
  criticalImages?: string[];
  criticalFonts?: string[];
  preloadScripts?: string[];
}

const { 
  pageType = 'home',
  criticalImages = [],
  criticalFonts = [],
  preloadScripts = []
} = Astro.props;

const baseUrl = import.meta.env.BASE_URL;
const withBase = (p: string) => {
  const cleanPath = p.replace(/^\//, '');
  return `${baseUrl}${baseUrl.endsWith('/') ? '' : '/'}${cleanPath}`;
};

// Default critical resources for each page type
const defaultResources = {
  home: {
    images: [],
    fonts: [],
    scripts: [
      withBase('/scripts/performance-monitor.js'),
      withBase('/scripts/lazy-loading.js')
    ]
  },
  about: {
    images: [],
    fonts: [],
    scripts: [
      withBase('/scripts/performance-monitor.js')
    ]
  },
  services: {
    images: [],
    fonts: [],
    scripts: [
      withBase('/scripts/performance-monitor.js'),
      withBase('/scripts/showcase.js')
    ]
  },
  showcase: {
    images: [],
    fonts: [],
    scripts: [
      withBase('/scripts/performance-monitor.js'),
      withBase('/scripts/showcase.js')
    ]
  },
  contact: {
    images: [],
    fonts: [],
    scripts: [
      withBase('/scripts/performance-monitor.js'),
      withBase('/scripts/contact-form.js')
    ]
  }
};

const resources = (defaultResources[pageType] || defaultResources.home);
---

<!-- DNS Prefetch for external domains -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//www.google.com" />
<link rel="dns-prefetch" href="//formspree.io" />

<!-- Preconnect to external domains -->
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="preconnect" href="https://www.google.com" crossorigin />
<link rel="preconnect" href="https://formspree.io" crossorigin />

<!-- Preload critical fonts -->
{resources.fonts.map(font => (
  <link 
    rel="preload" 
    href={font} 
    as="font" 
    type="font/woff2" 
    crossorigin 
  />
))}

<!-- Preload critical images removed for text-only mode -->

<!-- Preload critical scripts -->
{resources.scripts.map(script => (
  <link 
    rel="preload" 
    href={script} 
    as="script" 
  />
))}

<!-- Custom image preloads disabled -->

{criticalFonts.map(font => (
  <link 
    rel="preload" 
    href={font} 
    as="font" 
    crossorigin 
  />
))}

{preloadScripts.map(script => (
  <link 
    rel="preload" 
    href={script} 
    as="script" 
  />
))}

<!-- Image prefetch disabled in text-only mode -->

<!-- Prefetch service pages -->
<link rel="prefetch" href={withBase('/services/api-development')} />
<link rel="prefetch" href={withBase('/services/automation-systems')} />
<link rel="prefetch" href={withBase('/services/data-analytics')} />
<link rel="prefetch" href={withBase('/services/iot-integration')} />
<link rel="prefetch" href={withBase('/services/mobile-apps')} />

<!-- Prefetch project pages -->
<link rel="prefetch" href={withBase('/projects/farm-sensor-network')} />
<link rel="prefetch" href={withBase('/projects/yield-analytics')} />
<link rel="prefetch" href={withBase('/projects/farm-management-ios')} />

<!-- Module preload for ES modules -->
<link rel="modulepreload" href={withBase('/scripts/performance-monitor.js')} />
<link rel="modulepreload" href={withBase('/scripts/lazy-loading.js')} />
<link rel="modulepreload" href={withBase('/scripts/sw-register.js')} />

<!-- CSS files are now imported as modules in BaseLayout -->

<script>
  // Resource loading optimization
  if ('connection' in navigator) {
    // Slow connection - reduce preloading
    if (navigator.connection.effectiveType === 'slow-2g' || 
        navigator.connection.effectiveType === '2g') {
      const preloadLinks = document.querySelectorAll('link[rel="preload"]');
      preloadLinks.forEach(link => {
        if (link.getAttribute('as') !== 'font') {
          link.rel = 'prefetch';
        }
      });
    }
    
    // Save data mode - disable preloading
    if (navigator.connection.saveData) {
      const preloadLinks = document.querySelectorAll('link[rel="preload"]');
      preloadLinks.forEach(link => {
        link.rel = 'prefetch';
      });
    }
  }
  
  // Intersection Observer for viewport-based preloading
  if ('IntersectionObserver' in window) {
    const preloadObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const link = entry.target;
          if (link.rel === 'prefetch') {
            link.rel = 'preload';
          }
          preloadObserver.unobserve(link);
        }
      });
    }, { rootMargin: '50px' });
    
    // Observe prefetch links for viewport-based loading
    const prefetchLinks = document.querySelectorAll('link[rel="prefetch"]');
    prefetchLinks.forEach(link => preloadObserver.observe(link));
  }
</script>
